import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gdk
from gi.repository.GdkPixbuf import Pixbuf

from ThreatTracker import threatTracker
from Client import try_connecting
import threading
import BroadcastServer


connected = ['192.168.1.1', '192.168.1.2']

# server_thread = 0
a0 = True


class SEAM(Gtk.Window):

    def __init__(self):
        Gtk.Window.__init__(self, title="SEAM")
        Gtk.Window.set_default_geometry(self, 1400, 800)

        self.list_store = Gtk.ListStore(str, str)

        self.sidepane_listbox = Gtk.ListBox()

        self.mainpane_treeview = Gtk.TreeView()

        self.scrollable_treelist = Gtk.ScrolledWindow()

        self.grid = Gtk.Grid()
        self.add(self.grid)

        # Top row buttons: Scan, Scan All, ignore all, delete all, show ignored

        #listbox = Gtk.ListBox()
        #listbox.set_selection_mode(Gtk.SelectionMode.SINGLE)

        #row1 = Gtk.ListBoxRow()
        #row1.set_size_request(1400, 100)
        #label = Gtk.Label(connected[0])
        #row1.add(label)
        #listbox.add(row1)
        #listbox.select_row(row1)

    def top_pane(self):
        try:
            mag = Pixbuf.new_from_file_at_size("Images/mag-glass.png", 100, 100)
        except:
            mag = None
        img1 = Gtk.Image()
        img1.set_from_pixbuf(mag)
        scan = Gtk.Button( image=img1)
        scan.set_image(img1)
        scan.set_always_show_image(True)

        scan.set_size_request(150, 100)
        self.grid.attach(scan, 0, 0, 3, 1)

        # Scan all button
        try:
            mag_multiple = Pixbuf.new_from_file_at_size("Images/mag-glass-multiple.png", 100, 100)
        except:
            mag_multiple = None
        img2 = Gtk.Image()
        img2.set_from_pixbuf(mag_multiple)
        scanAll = Gtk.Button( image=img2)
        scanAll.set_image(img2)
        scanAll.set_always_show_image(True)

        scanAll.set_size_request(150, 100)
        self.grid.attach(scanAll, 3, 0, 3, 1)

        try:
            IgnoreAll = Pixbuf.new_from_file_at_size("Images/IgnoreAll.png", 100, 100)
        except:
            IgnoreAll = None
        img3 = Gtk.Image()
        img3.set_from_pixbuf(IgnoreAll)
        ignoreAll = Gtk.Button(image=img3)
        ignoreAll.set_image(img3)
        ignoreAll.set_always_show_image(True)

        ignoreAll.set_size_request(150, 100)
        self.grid.attach(ignoreAll, 6, 0, 3, 1)

        try:
            DeleteAll = Pixbuf.new_from_file_at_size("Images/DeleteAll.png", 100, 100)
        except:
            DeleteAll = None
        img4 = Gtk.Image()
        img4.set_from_pixbuf(DeleteAll)
        deleteAll = Gtk.Button(image=img4)
        deleteAll.set_image(img4)
        deleteAll.set_always_show_image(True)

        deleteAll.set_size_request(150, 100)
        self.grid.attach(deleteAll, 9, 0, 3, 1)

    def main_pane(self):
        # listbox = Gtk.ListBox()
        # listbox.set_selection_mode(Gtk.SelectionMode.NONE)

        # a0 = True

        # global a0

        # for x in tt.threatList:
        #    row = Gtk.ListBoxRow()
        #    grid = Gtk.Grid()
        #    row.add(grid)

        #    fileName = Gtk.Label(x[1])
        #    fileLoc = Gtk.Label(x[0])
        #    nothing = Gtk.Button(label="nothing")

        #    grid.attach(fileName, 0, 0, 1, 1)
        #    grid.attach(fileLoc, 0, 1, 1, 1)

        #    if a0:
        #        row.modify_bg(Gtk.StateType.NORMAL, Gdk.Color(red=0, green=0, blue=0))
        #        a0 = not a0
        #    else:
        #        row.modify_bg(Gtk.StateType.NORMAL, Gdk.Color(red=255, green=255, blue=255))
        #        a0 = not a0

        #    listbox.add(row)

        #listbox.set_size_request(1150, 700)
        #self.grid.attach(listbox, 4, 1, 23, 7)

        for threat_id in tt.threatList:
            self.list_store.append(list(threat_id))

        for i, column_title in enumerate(["File Name", "File Location", "", ""]):
            renderer = Gtk.CellRendererText()
            column = Gtk.TreeViewColumn(column_title, renderer, text=i)
            self.mainpane_treeview.append_column(column)

        self.scrollable_treelist.set_vexpand(True)
        self.grid.attach_next_to(self.scrollable_treelist, self.sidepane_listbox, Gtk.PositionType.RIGHT, 23, 7)
        self.scrollable_treelist.add(self.mainpane_treeview)

        self.show_all()

    def side_pane(self):
        self.sidepane_listbox = Gtk.ListBox()
        self.sidepane_listbox.set_selection_mode(Gtk.SelectionMode.SINGLE)

        row1 = Gtk.ListBoxRow()
        row1.set_size_request(150, 100)
        label = Gtk.Label(connected[0])
        row1.add(label)
        self.sidepane_listbox.add(row1)
        self.sidepane_listbox.select_row(row1)

        for x in connected[1:]:
            row1 = Gtk.ListBoxRow()
            row1.set_size_request(200, 100)
            label = Gtk.Label(x)
            row1.add(label)
            self.sidepane_listbox.add(row1)

        self.sidepane_listbox.set_size_request(200, 700)
        self.grid.attach(self.sidepane_listbox, 0, 1, 4, 7)

    def button_click(self, widget):
        print("You clicked " + widget.get_properties("label")[0])

    def connect_to_server(self):
        if not try_connecting():
            print("creating server...")

            server_thread = threading.Thread(target=BroadcastServer.broadcast_server)
            server_thread.setDaemon(True)
            server_thread.start()

            print("Server Thread Started.")
        else:
            client_thread = threading.Thread(target=BroadcastServer.broadcast_client)
            client_thread.setDaemon(True)
            client_thread.start()

window = SEAM()

# window.connect_to_server()

tt = threatTracker()
print(tt.threatList)
window.top_pane()
window.side_pane()
window.main_pane()

css = Gtk.CssProvider()
css.load_from_path('styles.css')
screen = Gdk.Screen.get_default()
styleContext = Gtk.StyleContext()
styleContext.add_provider_for_screen(screen, css, Gtk.STYLE_PROVIDER_PRIORITY_USER)

window.connect("delete-event", Gtk.main_quit)
window.show_all()

Gtk.main()
