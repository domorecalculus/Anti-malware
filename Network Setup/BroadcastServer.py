# Send UDP broadcast packets

import socket
from GUI import tt

MYPORT = 50000
MYPORT2 = 50001

connected = []

global server_address
server_address = ('', 0)
global connected
connected = []


def parse_message(data):
    message = data[0].decode('utf-8')
    address = data[1]

# Only prints messages from other computers
    if address[0] != socket.gethostbyname(socket.gethostname()):
        print('Message: ' + message + '\nAddress: ' + address[0])

# Message Parsing
    if message == 'connecting':
        try:
            tt.connectedIPs[address[0]]
        except KeyError:
            tt.threatData[address[0]] = []
            tt.connectedIPs.append(address[0])
        send_message("Request Threats".encode('utf-8'), address)

    elif message == 'Request Threats':
        send_message(tt.threatList.encode('utf-8'), address)

    elif message.split(' ')[0] == 'Threats from:':
        for x in connected:
            if x != address:
                send_message(message, x)

    elif message == 'disconnecting':
        connected.remove(address)
        for x in connected:
            send_message('disconnected' + address, address)

    elif message.split(' ')[0] == 'disconnected':
        return

    elif message.split(' ')[0] == ':':
        return

    else:
        return


def send_message(data, address):
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.sendto(data, address)


def broadcast_server():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.bind(('', MYPORT))
    s.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
    s.setblocking(0)

    sTCP = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sTCP.bind(('', MYPORT2))
    sTCP.setblocking(0)
    sTCP.settimeout(.2)
    print("Server Initialized.")

    while True:
        # Sending first contact message via UDP socket
        data = bytes("scan".encode(encoding='utf-8'))
        try:
            s.sendto(data, ('255.255.255.255', MYPORT))
        except socket.error:
            pass

        # try:
        #    m = s.recvfrom(1024)
        #    parse_message(m)
        # except socket.error:
        #    pass

        try:
            conn, addr = sTCP.accept()
            connected.append(conn)
            print(addr)
            print(conn)
            print(connected)
        except socket.error:
            pass



def broadcast_client():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(('', MYPORT2))
    s.connect(server_address)

    while True:
        try:
            m = s.recvfrom(1024)
            parse_message(m)
        except socket.error:
            pass
